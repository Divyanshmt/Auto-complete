{"version":3,"sources":["components/Chip/Chip.js","api/user-service.js","components/Suggestion/Suggestion.js","components/AutoComplete/AutoComplete.js","App.js","serviceWorker.js","index.js"],"names":["Chip","user","onClose","className","src","alt","name","onClick","e","getUsers","fetch","res","json","Suggestion","email","AutoComplete","updateUserList","userList","setState","updateSearch","search","target","value","_addChips","state","selectedUserList","find","u","id","hideSuggestionList","searchInputRef","current","blur","_deleteChip","stopPropagation","filter","React","createRef","userService","data","this","toggle","focus","join","map","i","key","tabIndex","onFocus","toggleList","placeholder","ref","type","onChange","onBlur","filteredList","findIndex","toLowerCase","match","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wYAgBeA,MAbR,YAAkC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,QACzB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,YAAYC,IAAG,+BAAkCC,IAAI,KACpE,yBAAKF,UAAU,aACVF,EAAKK,MAEV,yBAAKH,UAAU,aAAaI,QAAS,SAACC,GAAD,OAAON,EAAQM,EAAGP,KAAvD,YCVG,GACLQ,SADK,2IAEWC,MAAM,8CAFjB,cAEDC,EAFC,gBAGMA,EAAIC,OAHV,yI,MCGA,SAASC,EAAT,GAAwC,IAAlBZ,EAAiB,EAAjBA,KAAMM,EAAW,EAAXA,QACvC,OACI,yBAAKA,QAAS,SAACC,GAAD,OAAOD,EAAQC,EAAEP,IAAOE,UAAU,cAC5C,yBAAKA,UAAU,YAAYC,IAAI,yCAAyCC,IAAI,KAC5E,yBAAKF,UAAU,aACVF,EAAKK,MAEV,yBAAKH,UAAU,cACVF,EAAKa,QCJf,IA2FQC,EA3Ff,YACI,aAAe,IAAD,8BACV,+CAuBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVD,cA1BM,EA8BdE,aAAe,SAACX,GACZ,EAAKU,SAAS,CACVE,OAAQZ,EAAEa,OAAOC,SAhCX,EA+CdC,UAAY,SAACf,EAAGP,GAAU,IAAD,EACkB,EAAKuB,MAApCP,EADa,EACbA,SAAUQ,EADG,EACHA,iBAClB,EAAKP,SAAS,CACVO,iBAAiB,GAAD,mBAAMA,GAAN,CAAwBR,EAASS,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAO3B,EAAK2B,QACzEC,oBAAoB,EACpBT,OAAQ,KAEZ,EAAKU,eAAeC,QAAQC,QAtDlB,EAyDdC,YAAc,SAACzB,EAAGP,GACdO,EAAE0B,kBADqB,IAGfT,EAAqB,EAAKD,MAA1BC,iBACR,EAAKP,SAAS,CACVO,iBAAkBA,EAAiBU,QAAO,SAAAR,GAAC,OAAIA,EAAEC,KAAO3B,EAAK2B,MAC7DC,oBAAoB,EACpBT,OAAQ,KAGZ,EAAKU,eAAeC,QAAQC,QAjE5B,EAAKR,MAAQ,CACTP,SAAU,GACVG,OAAQ,GACRK,iBAAkB,GAClBI,oBAAoB,GAGxB,EAAKC,eAAiBM,IAAMC,YATlB,EADlB,iNAe2BC,EAAY7B,WAfvC,OAec8B,EAfd,OAgBQC,KAAKxB,eAAeuB,GAhB5B,uIAqCeE,GAAS,IAAD,OACf,OAAO,WACEA,GACD,EAAKX,eAAeC,QAAQW,QAEhC,EAAKxB,SAAS,CACVW,mBAAoBY,OA3CpC,+BAuEc,IAAD,OACL,OACI,yBAAKtC,UAAW,CAAC,0BAA4BqC,KAAKhB,MAAMK,mBAA+B,GAAV,SAAcc,KAAK,MAC3FH,KAAKhB,MAAMC,iBAAiBmB,KAAI,SAAC3C,EAAM4C,GAAP,OAAa,kBAAC,EAAD,CAAMC,IAAKD,EAAG3C,QAAS,EAAK+B,YAAahC,KAAMA,OAE7F,yBAAK8C,SAAS,IAAIC,QAASR,KAAKS,YAAW,GAAQ9C,UAAU,mBACzD,2BAAO+C,YAAY,YAAYC,IAAKX,KAAKV,eAAgBsB,KAAK,OAAOjD,UAAU,eAAekD,SAAUb,KAAKrB,aAAcG,MAAOkB,KAAKhB,MAAMJ,UAE3IoB,KAAKhB,MAAMK,oBACT,yBAAKkB,SAAS,IAAIC,QAASR,KAAKS,YAAW,GAAQK,OAAQd,KAAKS,YAAW,GAAO9C,UAAU,mBACvFqC,KAAKe,aAAaX,KAAI,SAAA3C,GAAI,OAAI,kBAAC,EAAD,CAAY6C,IAAK7C,EAAK2B,GAAIrB,QAAS,EAAKgB,UAAWtB,KAAMA,YAjFpH,mCAmBwB,IAAD,OACf,OAAOuC,KAAKhB,MAAMP,SACbkB,QAAO,SAAClC,GAAD,OAA4E,IAAlE,EAAKuB,MAAMC,iBAAiB+B,WAAU,SAAA7B,GAAC,OAAIA,EAAEC,KAAO3B,EAAK2B,SAC1EO,QAAO,SAAClC,GAAD,OAAUA,EAAKK,KAAKmD,cAAcC,MAAM,EAAKlC,MAAMJ,OAAOqC,sBAtB9E,GAAkCE,aCInBC,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2DCZNO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.61a0decc.chunk.js","sourcesContent":["import React from 'react'\nimport './Chip.css'\n\nexport function Chip({ user, onClose }) {\n    return (\n        <div className=\"chip\">\n            <img className=\"chip-icon\" src={`http://placekitten.com/30/30`} alt=\"\" />\n            <div className=\"user-name\">\n                {user.name}\n            </div>\n            <div className=\"close-icon\" onClick={(e) => onClose(e, user)}>&#10006;</div>\n        </div>\n    )\n}\n\n\nexport default Chip\n","export default {\n    async getUsers() {\n        const res = await fetch('https://jsonplaceholder.typicode.com/users');\n        return await res.json()\n    }\n}","import React from 'react'\nimport './Suggestion.css'\n\nexport default function Suggestion({ user, onClick }) {\n    return (\n        <div onClick={(e) => onClick(e,user)} className=\"suggestion\">\n            <img className=\"user-icon\" src=\"https://github.com/identicons/Bret.png\" alt=\"\" />\n            <div className=\"user-name\">\n                {user.name}\n            </div>\n            <div className=\"user-email\">\n                {user.email}\n            </div>\n        </div>\n    )\n}\n\n","import React, { Component } from 'react'\nimport './AutoComplete.css';\nimport Chip from '../Chip/Chip';\nimport userService from '../../api/user-service';\nimport Suggestion from '../Suggestion/Suggestion';\n\n\nexport class AutoComplete extends Component {\n    constructor() {\n        super()\n        this.state = {\n            userList: [],\n            search: '',\n            selectedUserList: [],\n            hideSuggestionList: true\n        }\n\n        this.searchInputRef = React.createRef();\n\n    }\n\n    async componentDidMount() {\n        const data = await userService.getUsers();\n        this.updateUserList(data)\n    }\n\n    get filteredList() {\n        return this.state.userList\n            .filter((user) => this.state.selectedUserList.findIndex(u => u.id === user.id) === -1)\n            .filter((user) => user.name.toLowerCase().match(this.state.search.toLowerCase()))\n    }\n\n    updateUserList = (userList) => {\n        this.setState({\n            userList\n        })\n    }\n\n    updateSearch = (e) => {\n        this.setState({\n            search: e.target.value,\n        })\n    }\n\n    toggleList(toggle) {\n        return () => {\n            if (!toggle) {\n                this.searchInputRef.current.focus()\n            }\n            this.setState({\n                hideSuggestionList: toggle\n            })\n        }\n    }\n\n    _addChips = (e, user) => {\n        const { userList, selectedUserList } = this.state\n        this.setState({\n            selectedUserList: [...selectedUserList, userList.find(u => u.id === user.id)],\n            hideSuggestionList: true,\n            search: ''\n        });\n        this.searchInputRef.current.blur();\n    }\n\n    _deleteChip = (e, user) => {\n        e.stopPropagation();\n\n        const { selectedUserList } = this.state\n        this.setState({\n            selectedUserList: selectedUserList.filter(u => u.id !== user.id),\n            hideSuggestionList: true,\n            search: ''\n        });\n\n        this.searchInputRef.current.blur();\n    }\n\n    render() {\n        return (\n            <div className={[\"auto-complete-container\", !this.state.hideSuggestionList ? 'focus' : ''].join(' ')} >\n                {this.state.selectedUserList.map((user, i) => <Chip key={i} onClose={this._deleteChip} user={user}></Chip>)}\n\n                <div tabIndex=\"0\" onFocus={this.toggleList(false)} className=\"input-container\">\n                    <input placeholder=\"Search...\" ref={this.searchInputRef} type=\"text\" className=\"search-input\" onChange={this.updateSearch} value={this.state.search} />\n\n                    {!this.state.hideSuggestionList &&\n                        <div tabIndex=\"0\" onFocus={this.toggleList(false)} onBlur={this.toggleList(true)} className=\"suggestion-list\">\n                            {this.filteredList.map(user => <Suggestion key={user.id} onClick={this._addChips} user={user}></Suggestion>)}\n                        </div>\n                    }\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default AutoComplete\n","import React from 'react';\nimport './App.css';\nimport AutoComplete from './components/AutoComplete/AutoComplete';\n\n\nfunction App() {\n  return (\n    <AutoComplete></AutoComplete>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}